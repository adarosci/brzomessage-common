// Code generated by protoc-gen-go. DO NOT EDIT.
// source: communication.proto

package communication

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type UpdateFirebaseToken struct {
	KeyAccess            string   `protobuf:"bytes,1,opt,name=KeyAccess,proto3" json:"KeyAccess,omitempty"`
	FirebaseToken        string   `protobuf:"bytes,2,opt,name=FirebaseToken,proto3" json:"FirebaseToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateFirebaseToken) Reset()         { *m = UpdateFirebaseToken{} }
func (m *UpdateFirebaseToken) String() string { return proto.CompactTextString(m) }
func (*UpdateFirebaseToken) ProtoMessage()    {}
func (*UpdateFirebaseToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{0}
}

func (m *UpdateFirebaseToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateFirebaseToken.Unmarshal(m, b)
}
func (m *UpdateFirebaseToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateFirebaseToken.Marshal(b, m, deterministic)
}
func (m *UpdateFirebaseToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFirebaseToken.Merge(m, src)
}
func (m *UpdateFirebaseToken) XXX_Size() int {
	return xxx_messageInfo_UpdateFirebaseToken.Size(m)
}
func (m *UpdateFirebaseToken) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFirebaseToken.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFirebaseToken proto.InternalMessageInfo

func (m *UpdateFirebaseToken) GetKeyAccess() string {
	if m != nil {
		return m.KeyAccess
	}
	return ""
}

func (m *UpdateFirebaseToken) GetFirebaseToken() string {
	if m != nil {
		return m.FirebaseToken
	}
	return ""
}

// The response message containing the greetings
type ResultMessages struct {
	Success              bool     `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Result               string   `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultMessages) Reset()         { *m = ResultMessages{} }
func (m *ResultMessages) String() string { return proto.CompactTextString(m) }
func (*ResultMessages) ProtoMessage()    {}
func (*ResultMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64068f22c460ac1, []int{1}
}

func (m *ResultMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultMessages.Unmarshal(m, b)
}
func (m *ResultMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultMessages.Marshal(b, m, deterministic)
}
func (m *ResultMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultMessages.Merge(m, src)
}
func (m *ResultMessages) XXX_Size() int {
	return xxx_messageInfo_ResultMessages.Size(m)
}
func (m *ResultMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultMessages.DiscardUnknown(m)
}

var xxx_messageInfo_ResultMessages proto.InternalMessageInfo

func (m *ResultMessages) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ResultMessages) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ResultMessages) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ResultMessages) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*UpdateFirebaseToken)(nil), "communication.UpdateFirebaseToken")
	proto.RegisterType((*ResultMessages)(nil), "communication.ResultMessages")
}

func init() { proto.RegisterFile("communication.proto", fileDescriptor_b64068f22c460ac1) }

var fileDescriptor_b64068f22c460ac1 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x31, 0x4f, 0xfb, 0x30,
	0x10, 0xc5, 0xff, 0xe9, 0x1f, 0x0a, 0x39, 0x28, 0xc3, 0x15, 0x21, 0x0b, 0x81, 0x84, 0x2c, 0x06,
	0xa6, 0x0c, 0xb0, 0xb1, 0xb5, 0x48, 0x2c, 0x08, 0x29, 0x4a, 0x61, 0x60, 0x74, 0xdc, 0x53, 0x65,
	0xd1, 0xc4, 0xd6, 0x39, 0x19, 0xca, 0x47, 0xe0, 0x53, 0xa3, 0x3a, 0xa9, 0x8a, 0x2b, 0xc6, 0x8e,
	0xef, 0xf9, 0xdd, 0x4f, 0x7e, 0xa7, 0x83, 0xb1, 0xb6, 0x55, 0xd5, 0xd6, 0x46, 0xab, 0xc6, 0xd8,
	0x3a, 0x73, 0x6c, 0x1b, 0x8b, 0xa3, 0xc8, 0x94, 0x1f, 0x30, 0x7e, 0x77, 0x73, 0xd5, 0xd0, 0xb3,
	0x61, 0x2a, 0x95, 0xa7, 0x37, 0xfb, 0x49, 0x35, 0x5e, 0x41, 0xfa, 0x42, 0xab, 0x89, 0xd6, 0xe4,
	0xbd, 0x48, 0x6e, 0x92, 0xbb, 0xb4, 0xd8, 0x1a, 0x78, 0x0b, 0xa3, 0x28, 0x2e, 0x06, 0x21, 0x11,
	0x9b, 0x92, 0xe1, 0xac, 0x20, 0xdf, 0x2e, 0x9b, 0x57, 0xf2, 0x5e, 0x2d, 0xc8, 0xa3, 0x80, 0xa3,
	0x59, 0xbb, 0x65, 0x1e, 0x17, 0x1b, 0x89, 0xe7, 0x70, 0x48, 0xcc, 0x96, 0x7b, 0x52, 0x27, 0xd6,
	0xf9, 0xaa, 0x9b, 0x15, 0xff, 0x83, 0xbf, 0x91, 0x78, 0x01, 0x43, 0x0e, 0x6c, 0x71, 0x10, 0x1e,
	0x7a, 0x75, 0xff, 0x3d, 0xd8, 0xf9, 0x1a, 0xe6, 0x90, 0x76, 0x05, 0x27, 0xce, 0xa0, 0xcc, 0xe2,
	0x95, 0xfc, 0x51, 0xfd, 0xf2, 0x7a, 0x27, 0x13, 0x77, 0x90, 0xff, 0xb0, 0x80, 0x93, 0x9e, 0x38,
	0xaf, 0x4c, 0xbd, 0x1f, 0xe6, 0x0c, 0x4e, 0xbb, 0xb9, 0x5c, 0xad, 0x9c, 0x5a, 0xee, 0x05, 0x3a,
	0x7d, 0x04, 0x69, 0x6c, 0xb6, 0x60, 0xa7, 0xb3, 0x92, 0xbf, 0x6c, 0xbf, 0x3b, 0x1f, 0x8f, 0x4d,
	0xf1, 0xe9, 0xb7, 0xcc, 0xd7, 0x47, 0x92, 0x27, 0xe5, 0x30, 0x5c, 0xcb, 0xc3, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x3c, 0x04, 0xec, 0x3c, 0x44, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FirebaseTokenClient is the client API for FirebaseToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FirebaseTokenClient interface {
	// Sends a greeting
	UpdateApi(ctx context.Context, in *UpdateFirebaseToken, opts ...grpc.CallOption) (*ResultMessages, error)
	UpdateAdmin(ctx context.Context, in *UpdateFirebaseToken, opts ...grpc.CallOption) (*ResultMessages, error)
	UpdatePaypal(ctx context.Context, in *UpdateFirebaseToken, opts ...grpc.CallOption) (*ResultMessages, error)
}

type firebaseTokenClient struct {
	cc *grpc.ClientConn
}

func NewFirebaseTokenClient(cc *grpc.ClientConn) FirebaseTokenClient {
	return &firebaseTokenClient{cc}
}

func (c *firebaseTokenClient) UpdateApi(ctx context.Context, in *UpdateFirebaseToken, opts ...grpc.CallOption) (*ResultMessages, error) {
	out := new(ResultMessages)
	err := c.cc.Invoke(ctx, "/communication.FirebaseToken/UpdateApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firebaseTokenClient) UpdateAdmin(ctx context.Context, in *UpdateFirebaseToken, opts ...grpc.CallOption) (*ResultMessages, error) {
	out := new(ResultMessages)
	err := c.cc.Invoke(ctx, "/communication.FirebaseToken/UpdateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firebaseTokenClient) UpdatePaypal(ctx context.Context, in *UpdateFirebaseToken, opts ...grpc.CallOption) (*ResultMessages, error) {
	out := new(ResultMessages)
	err := c.cc.Invoke(ctx, "/communication.FirebaseToken/UpdatePaypal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirebaseTokenServer is the server API for FirebaseToken service.
type FirebaseTokenServer interface {
	// Sends a greeting
	UpdateApi(context.Context, *UpdateFirebaseToken) (*ResultMessages, error)
	UpdateAdmin(context.Context, *UpdateFirebaseToken) (*ResultMessages, error)
	UpdatePaypal(context.Context, *UpdateFirebaseToken) (*ResultMessages, error)
}

// UnimplementedFirebaseTokenServer can be embedded to have forward compatible implementations.
type UnimplementedFirebaseTokenServer struct {
}

func (*UnimplementedFirebaseTokenServer) UpdateApi(ctx context.Context, req *UpdateFirebaseToken) (*ResultMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (*UnimplementedFirebaseTokenServer) UpdateAdmin(ctx context.Context, req *UpdateFirebaseToken) (*ResultMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdmin not implemented")
}
func (*UnimplementedFirebaseTokenServer) UpdatePaypal(ctx context.Context, req *UpdateFirebaseToken) (*ResultMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaypal not implemented")
}

func RegisterFirebaseTokenServer(s *grpc.Server, srv FirebaseTokenServer) {
	s.RegisterService(&_FirebaseToken_serviceDesc, srv)
}

func _FirebaseToken_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFirebaseToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirebaseTokenServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.FirebaseToken/UpdateApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirebaseTokenServer).UpdateApi(ctx, req.(*UpdateFirebaseToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirebaseToken_UpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFirebaseToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirebaseTokenServer).UpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.FirebaseToken/UpdateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirebaseTokenServer).UpdateAdmin(ctx, req.(*UpdateFirebaseToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirebaseToken_UpdatePaypal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFirebaseToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirebaseTokenServer).UpdatePaypal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.FirebaseToken/UpdatePaypal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirebaseTokenServer).UpdatePaypal(ctx, req.(*UpdateFirebaseToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _FirebaseToken_serviceDesc = grpc.ServiceDesc{
	ServiceName: "communication.FirebaseToken",
	HandlerType: (*FirebaseTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateApi",
			Handler:    _FirebaseToken_UpdateApi_Handler,
		},
		{
			MethodName: "UpdateAdmin",
			Handler:    _FirebaseToken_UpdateAdmin_Handler,
		},
		{
			MethodName: "UpdatePaypal",
			Handler:    _FirebaseToken_UpdatePaypal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "communication.proto",
}
